package main

import (
	"fmt"
	"runtime"
	"sync"
)

func joinChannels(channels ...chan int) <-chan int {
	out := make(chan int)
	wg := &sync.WaitGroup{}
	go func() {
		for _, ch := range channels {
			wg.Add(1)
			go func(ch <-chan int, wg *sync.WaitGroup) {
				defer wg.Done()
				runtime.Gosched()
				for id := range ch {
					out <- id
				}
			}(ch, wg)
		}
		wg.Wait()
		close(out)
	}()
	return out
}

func main() {
	numOfChs := 10
	chs := make([]chan int, 0, numOfChs)
	for i := 0; i < numOfChs; i++ {
		chs = append(chs, make(chan int))
	}

	go func() {
		wg := &sync.WaitGroup{}
		for i := range chs {
			wg.Add(1)
			go func(i int, wg *sync.WaitGroup) {
				defer wg.Done()
				for j := 0; j < 10; j++ {
					chs[i] <- j + 10*i
				}
				close(chs[i])
			}(i, wg)
		}
		wg.Wait()
	}()

	resultArr := make([]int, 0)
	// ТЗ
	for num := range joinChannels(chs...) {
		resultArr = append(resultArr, num)
		fmt.Println(num)
	}

	grid := make([]int, 100, 100)
	for i := 0; i < len(resultArr); i++ {
		grid[resultArr[i]]++
	}

	fmt.Println("amount:", len(resultArr))
	fmt.Print("check: ")
	for i := 0; i < len(grid); i++ {
		fmt.Print(grid[i])
	}

	// подумать, как сделать, чтобы чтение производилось последовательно из каналов - runtime.Goshed() ?
}

// output:
// 90
// 91
// 0
// 10
// 20
// 30
// 40
// 50
// 60
// 70
// 80
// 81
// 92
// 1
// 11
// 21
// 31
// 41
// 51
// 61
// 71
// 82
// 83
// 93
// 2
// 12
// 22
// 32
// 42
// 52
// 62
// 72
// 84
// 94
// 3
// 13
// 23
// 33
// 43
// 53
// 63
// 73
// 85
// 86
// 95
// 44
// 4
// 14
// 24
// 34
// 74
// 54
// 64
// 87
// 96
// 45
// 5
// 15
// 25
// 35
// 75
// 55
// 65
// 88
// 97
// 46
// 6
// 16
// 26
// 36
// 76
// 56
// 66
// 89
// 98
// 47
// 7
// 17
// 18
// 27
// 37
// 77
// 57
// 67
// 99
// 38
// 48
// 8
// 19
// 28
// 58
// 78
// 68
// 9
// 39
// 49
// 29
// 59
// 79
// 69
// amount: 100
// check: 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
// output:
// 90
// 91
// 0
// 10
// 20
// 30
// 40
// 50
// 60
// 70
// 80
// 92
// 1
// 11
// 21
// 22
// 31
// 41
// 51
// 61
// 12
// 71
// 81
// 93
// 2
// 42
// 23
// 32
// 52
// 62
// 82
// 13
// 72
// 43
// 94
// 24
// 3
// 33
// 53
// 63
// 83
// 14
// 73
// 44
// 95
// 25
// 4
// 34
// 54
// 64
// 84
// 15
// 74
// 45
// 96
// 26
// 5
// 35
// 55
// 65
// 85
// 16
// 97
// 75
// 46
// 27
// 36
// 6
// 56
// 66
// 86
// 17
// 98
// 76
// 47
// 28
// 37
// 7
// 57
// 67
// 87
// 18
// 99
// 77
// 48
// 29
// 38
// 8
// 58
// 68
// 88
// 19
// 78
// 49
// 39
// 9
// 59
// 69
// 89
// 79
// amount: 100
// check: 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
// output:
// 90
// 91
// 50
// 10
// 20
// 30
// 40
// 70
// 60
// 80
// 92
// 51
// 11
// 21
// 31
// 41
// 71
// 61
// 93
// 81
// 12
// 52
// 22
// 32
// 42
// 94
// 72
// 62
// 82
// 13
// 53
// 23
// 33
// 43
// 95
// 73
// 63
// 83
// 14
// 54
// 24
// 34
// 44
// 96
// 74
// 64
// 0
// 84
// 15
// 55
// 25
// 35
// 45
// 97
// 75
// 65
// 1
// 85
// 16
// 56
// 26
// 36
// 46
// 98
// 76
// 66
// 2
// 86
// 17
// 57
// 27
// 37
// 47
// 99
// 67
// 77
// 3
// 87
// 18
// 58
// 28
// 38
// 48
// 68
// 88
// 78
// 4
// 59
// 19
// 29
// 39
// 49
// 69
// 89
// 79
// 5
// 6
// 7
// 8
// 9
// amount: 100
// check: 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
